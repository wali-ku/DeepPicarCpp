# Find where we're running from, so we can store generated files here
SCRIPT_DIR := $(shell dirname $(realpath $(lastword $(MAKEFILE_LIST))))

# The location of the tensorflow/contrib/makefile directory
TFMAKEFILE_DIR := $(SCRIPT_DIR)/../../makefile

# Where compiled objects are stored.
GENDIR := $(SCRIPT_DIR)/gen/
OBJDIR := $(GENDIR)obj/
LIBDIR := $(GENDIR)lib/
BINDIR := $(GENDIR)bin/

# The expected locations of the TensorFlow library
TFLIBDIR := $(TFMAKEFILE_DIR)/gen/lib
TFLIBS := $(TFLIBDIR)/libtensorflow-core.a

# Where the downloads have been stored
DOWNLOADSDIR := $(TFMAKEFILE_DIR)/downloads

# The location of the compiled protobuf headers generated by TensorFlow
PBTGENDIR := $(TFMAKEFILE_DIR)/gen/proto_text/
PROTOGENDIR := $(TFMAKEFILE_DIR)/gen/proto/
NSYNCLIBDIR := $(TFMAKEFILE_DIR)/downloads/nsync/builds/default.linux.c++11
NSYNCLIBS := $(NSYNCLIBDIR)/libnsync.a
NSYNC := $(TFMAKEFILE_DIR)/downloads/nsync/public/

# The location of RTG-Synch header and shared library
RTGDIR := /home/nvidia/ssd/gits/RT-Gang/experiments/tx2/sync/src/framework
RTGINC := $(RTGDIR)/include/
RTGLIB := $(RTGDIR)/build/

EXECUTABLE_NAME := $(BINDIR)/deepPicar

EXECUTABLE_SRCS := \
$(wildcard $(SCRIPT_DIR)/src/factories/*.cpp) \
$(SCRIPT_DIR)/src/deepPicar.cpp \
$(SCRIPT_DIR)/main.cpp

EXECUTABLE_OBJS := $(addprefix $(OBJDIR), $(EXECUTABLE_SRCS:.cpp=.o))

CXX := gcc
CXXFLAGS := --std=c++11 `pkg-config opencv --cflags`

LDFLAGS := \
-L$(RTGLIB) \
-L$(TFLIBDIR) \
-L$(NSYNCLIBDIR) \
-L/usr/local/lib \
-Wl,-rpath

INCLUDES := \
-I. \
-I$(NSYNC) \
-I$(RTGINC) \
-I$(PBTGENDIR) \
-I$(PROTOGENDIR) \
-I$(DOWNLOADSDIR) \
-I/usr/local/include \
-I$(DOWNLOADSDIR)/absl \
-I$(DOWNLOADSDIR)/eigen/ \
-I$(SCRIPT_DIR)/src/include \
-I$(SCRIPT_DIR)/src/include/factories

LIBS := \
-Wl,--allow-multiple-definition \
-Wl,--whole-archive \
-ltensorflow-core \
-Wl,--no-whole-archive \
-lz \
-lm \
-ldl \
-lrtg \
-lnsync \
-lstdc++ \
-lpthread \
-lprotobuf \
`pkg-config opencv --libs`

.PHONY: clean

all: $(EXECUTABLE_NAME)

$(EXECUTABLE_NAME): $(EXECUTABLE_OBJS) $(TFLIBS) $(NSYNCLIBS)
	@mkdir -p $(dir $@)
	@echo "LD $(notdir $@)"
	@$(CXX) $(CXXFLAGS) $(INCLUDES) \
	-o $(EXECUTABLE_NAME) $(EXECUTABLE_OBJS) \
	$(LIBFLAGS) $(LIB_PATH) $(LDFLAGS) $(LIBS)

$(OBJDIR)%.o: %.cpp
	@mkdir -p $(dir $@)
	@echo "CC $(notdir $@)"
	@$(CXX) $(CXXFLAGS) $(INCLUDES) -c $< -o $@

clean:
	rm -rf $(GENDIR)
